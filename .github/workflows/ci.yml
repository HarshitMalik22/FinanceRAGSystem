name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

defaults:
  run:
    working-directory: ./frontend

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        node-version: [18.x, 20.x]
    
    services:
      # Add any required services here (e.g., Redis, PostgreSQL)
      # redis:
      #   image: redis
      #   ports:
      #     - 6379:6379
      #   options: >-
      #     --health-cmd "redis-cli ping"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Install Node.js dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Run Python tests
      run: |
        pytest tests/ --cov=finance_rag_app --cov-report=xml
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run frontend tests
      run: |
        npm test -- --coverage --watchAll=false
      working-directory: ./frontend

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml,./frontend/coverage/lcov.info
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python linters
      run: |
        pip install black flake8 isort mypy

    - name: Run Python linters
      run: |
        black --check .
        flake8 .
        isort --check-only .
        mypy .

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install Node.js dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Run ESLint
      run: npx eslint . --ext .js,.jsx,.ts,.tsx
      working-directory: ./frontend

    - name: Run TypeScript type check
      run: npx tsc --noEmit
      working-directory: ./frontend

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and export to Docker images
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: finance-rag-system:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Build frontend production
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build
        retention-days: 1
